ERRORS
	agrc == 5 || 6 (# of philo, time_to_die, time_to_eat, time_to_sleep, [number of times each philosopher must eat])
	check with int_check.c if the inputs are vailid ints

change the variable type of t2* to be suseconds_t and * by 1000 to transfom into micorseconds

TODO
	ERROR CHECKING
		- check that all the numbers are valid ints			done(get_dishes)
		- check that all numbers are greater than thier min	done(get_dishes)
	INITIALIZING
		- nphilo											done(get_dishes)
		- t2d												done(get_dishes)
		- t2e												done(get_dishes)
		- t2s												done(get_dishes)
		- stomach											done(get_dishes)
		- st (start_time)									done(main)
		- f (fork list)										done(create_guest_list)
		- a_p (philo array)									done(create_guest_list)
			- p_n (philo #)									done(invite_guest)
			- n_e (times eaten)								done(invite_guest)
			- al (if alive)									done(invite_guest)
			- t_e (timestamp of when eaten)					done(main)
			- t (pointer to the table)						done(invite_guest)
		- a_t (thread array)								done(create_guest_list)
	ROUTINE
		- EATING
			-
		- SLEEP
			-
		- THINKING
	need to find a way to exit if all are done eating 
	Free & Exiting

TIME
	-usleep(useconds_t) -- useconds_t == unsigned int
	-timeval{
		time_t tv_secs (secs) LONG
		suseconds_t tv_usec (micorseconds) INT
	}

THOUGHTS
philo cant start eating with 0 ms to live
if philo has eaten # of time, does he keep eating ? YES
use pt_detach to "free" everything
we have to check before eating and sleeping if the t2e or the t2s is going to put us over the death time by more than the 10 ms before we do the wait

Fail with 1 philo